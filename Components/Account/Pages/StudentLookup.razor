@page "/student-lookup"
@using VaxSync.Web.Models
@using VaxSync.Web.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

@inject ApplicationDbContext DbContext
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Student Lookup</PageTitle>

<h3>Search Student Records</h3>

<div class="mb-3">
    <input class="form-control" placeholder="Enter Student ID or SSN" @bind="searchTerm" />
</div>

<button class="btn btn-primary mb-4" @onclick="SearchStudent">Search</button>

@if (filteredStudent != null)
{
    <h5>Results for: <strong>@filteredStudent.FullName</strong></h5>

    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th>Vaccine</th>
                <th>Date</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var v in filteredStudent.VaccineRecords)
            {
                <tr>
                    <td>@v.VaccineName</td>
                    <td>@v.Date</td>
                    <td>
                        @if (v.Status == "Compliant")
                        {
                            <span class="text-success">✅ Compliant</span>
                        }
                        else if (v.Status == "Pending")
                        {
                            <span class="text-warning">⚠️ Pending</span>
                        }
                        else
                        {
                            <span class="text-danger">❌ Not Compliant</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <a class="btn btn-outline-secondary" href=$"/student-details/{filteredStudent.Id}">View Full History</a>
}
else if (searched)
{
    <p class="text-danger">No student found with that ID or SSN.</p>
}

@code {
    private string searchTerm = string.Empty;
    private Student? filteredStudent;
    private bool searched = false;
    private string? userSchoolId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is not null)
        {
            userSchoolId = user.SchoolId;
        }
    }

    private void SearchStudent()
    {
        searched = true;

        if (!string.IsNullOrWhiteSpace(searchTerm) && userSchoolId is not null)
        {
            filteredStudent = DbContext.Students
                .Where(s => s.SchoolId == userSchoolId &&
                           (s.SchoolId.Equals(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            s.SSN.Equals(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .FirstOrDefault();
        }
    }
}
